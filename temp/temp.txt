As I;m still working out the best approach, lets scaffold this:
main.py - gui entry point to the individual scrapers that might use different strategies and target different docuentation sites
openAI-cat.py - test scraper that will check the currently available openAI models and their parameters 

---
do also this:
I can make emit_model_py even more aggressive in generating nested classes for any nested object or array of object.
---

python schema_discovery.py --emit-prompt --out openai_price

python schema_discovery.py --url https://openai.com/api/pricing/ --provider gpt4o --emit-model --prompt schemas/openai_price_prompt.txt --out openai_price

python openAI-cat.py -p gpt4o


------
Analyze the content and propose a compact JSON Schema that describes the data a user would want to extract from this page (fields, nested objects, arrays).

Guidance: Produce a JSON Schema (draft-like) describing the structured information present on the page. Return only the JSON Schema object as JSON (no commentary). Include required fields and types. Prefer simple types (string, number, boolean, array, object). Add a top-level `examples` key with one example instance.

--- modle 1--

from pydantic import BaseModel, Field
from typing import Optional, Any, List

class DiscoveredModel_Modelsitem_Pricing(BaseModel):
    input: Optional[str] = Field(..., description="Pricing for input tokens.", example="$1.250 / 1M tokens")
    cached_input: Optional[str] = Field(..., description="Pricing for cached input tokens.", example="$0.125 / 1M tokens")
    output: Optional[str] = Field(..., description="Pricing for output tokens.", example="")


class DiscoveredModel_Modelsitem(BaseModel):
    name: Optional[str] = Field(..., description="The name of the model.", example="GPT-5")
    description: Optional[str] = Field(..., description="A brief description of the model's capabilities.", example="The best model for coding and agentic tasks across industries")
    pricing: Optional[DiscoveredModel_Modelsitem_Pricing] = Field(..., description="Pricing details for the model.")

class DiscoveredModel(BaseModel):
    title: Optional[str] = Field(..., description="The title of the page.", example="API Pricing")
    models: Optional[List[DiscoveredModel_Modelsitem]] = Field(..., description="List of flagship models with pricing details.", example={"name": "GPT-5", "description": "The best model for coding and agentic tasks across industries", "pricing": {"input": "$1.250 / 1M tokens", "cached_input": "$0.125 / 1M tokens", "output": ""}})

# Field glossary (generated by LLM)
# ````json
# [
#   {
#     "name": "title",
#     "description": "The title of the page.",
#     "examples": [
#       "API Pricing"
#     ]
#   },
#   {
#     "name": "models",
#     "description": "List of flagship models with pricing details.",
#     "examples": []
#   },
#   {
#     "name": "name",
#     "description": "The name of the model.",
#     "examples": [
#       "GPT-5"
#     ]
#   },
#   {
#     "name": "description",
#     "description": "A brief description of the model's capabilities.",
#     "examples": [
#       "The best model for coding and agentic tasks across industries"
#     ]
#   },
#   {
#     "name": "pricing",
#     "description": "Pricing details for the model.",
#     "examples": []
#   },
#   {
#     "name": "input",
#     "description": "Pricing for input tokens.",
#     "examples": [
#       "$1.250 / 1M tokens"
#     ]
#   },
#   {
#     "name": "cached_input",
#     "description": "Pricing for cached input tokens.",
#     "examples": [
#       "$0.125 / 1M tokens"
#     ]
#   },
#   {
#     "name": "output",
#     "description": "Pricing for output tokens.",
#     "examples": [
#       ""
#     ]
#   }
# ]
# ````

--------- model 2 ---
from pydantic import BaseModel, Field
from typing import Optional, Any
from typing import List, Optional

class DiscoveredModel_Sectionsitem(BaseModel):
    name: Optional[str] = Field(..., description="The name of the section.", example="Batch API")
    description: Optional[str] = Field(..., description="A brief description of the section.", example="Save 50% on inputs and outputs with the Batch API and run tasks asynchronously over 24 hours.")
    link: Optional[str] = Field(..., description="URL link to more information about the section.", example="https://platform.openai.com/docs/guides/batch")

class DiscoveredModel(BaseModel):
    title: Optional[str] = Field(..., description="The main title of the page.", example="API Pricing")
    sections: Optional[List[DiscoveredModel_Sectionsitem]] = Field(..., description="List of sections on the pricing page.", example={"name": "Batch API", "description": "Save 50% on inputs and outputs with the Batch API and run tasks asynchronously over 24 hours.", "link": "https://platform.openai.com/docs/guides/batch"})

-- model 3 ---
from pydantic import BaseModel, Field
from typing import Optional, Any
from typing import List

class DiscoveredModel(BaseModel):
    title: Optional[str] = Field(..., description="The main title of the page.", example="API Pricing")
    contactSalesLink: Optional[str] = Field(..., description="URL to contact sales for more information.", example="/contact-sales/")
    pricingDetails: Optional[List[PricingdetailsItem]] = Field(..., description="List of pricing options and descriptions.", example={"name": "Batch API", "description": "Save 50% on inputs and outputs with the Batch API and run tasks asynchronously over 24 hours.", "link": "https://platform.openai.com/docs/guides/batch"})

# Field glossary (generated by LLM)
# ````json
# [
#   {
#     "name": "title",
#     "description": "The main title of the page.",
#     "examples": [
#       "API Pricing"
#     ]
#   },
#   {
#     "name": "contactSalesLink",
#     "description": "URL to contact sales for more information.",
#     "examples": [
#       "/contact-sales/"
#     ]
#   },
#   {
#     "name": "pricingDetails",
#     "description": "List of pricing options and descriptions.",
#     "examples": [
#       {
#         "name": "Batch API",
#         "description": "Save 50% on inputs and outputs with the Batch API and run tasks asynchronously over 24 hours.",
#         "link": "https://platform.openai.com/docs/guides/batch"
#       }
#     ]
#   }
# ]
# ````
