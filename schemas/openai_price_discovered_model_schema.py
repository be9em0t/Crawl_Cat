from pydantic import BaseModel, Field
from typing import Optional, Any
from typing import List, Optional

class DiscoveredModel_Pricingdetailsitem(BaseModel):
    name: Optional[str] = Field(..., description="Name of the pricing option.", example="Batch API")
    description: Optional[str] = Field(..., description="Description of the pricing option.", example="Save 50% on inputs and outputs with the Batch API and run tasks asynchronously over 24 hours.")
    link: Optional[str] = Field(..., description="URL for more information about the pricing option.", example="https://platform.openai.com/docs/guides/batch")

class DiscoveredModel(BaseModel):
    title: Optional[str] = Field(..., description="The main title of the page.", example="API Pricing")
    contactSalesLink: Optional[str] = Field(..., description="URL to contact sales for more information.", example="/contact-sales/")
    pricingDetails: Optional[List[DiscoveredModel_Pricingdetailsitem]] = Field(..., description="List of pricing options and descriptions.", example={"name": "Batch API", "description": "Save 50% on inputs and outputs with the Batch API and run tasks asynchronously over 24 hours.", "link": "https://platform.openai.com/docs/guides/batch"})

# Field glossary (generated by LLM)
# ````json
# [
#   {
#     "name": "title",
#     "description": "The main title of the page.",
#     "examples": [
#       "API Pricing"
#     ]
#   },
#   {
#     "name": "contactSalesLink",
#     "description": "URL to contact sales for more information.",
#     "examples": [
#       "/contact-sales/"
#     ]
#   },
#   {
#     "name": "pricingDetails",
#     "description": "List of pricing options and descriptions.",
#     "examples": [
#       {
#         "name": "Batch API",
#         "description": "Save 50% on inputs and outputs with the Batch API and run tasks asynchronously over 24 hours.",
#         "link": "https://platform.openai.com/docs/guides/batch"
#       }
#     ]
#   }
# ]
# ````
