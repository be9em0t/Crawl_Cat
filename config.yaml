common:
  out_folder: "output"  # Directory to save output files

defaults:  # Default values for all sources, overridden by source-specific settings
  url: null  # Main URL to crawl (single page)
  urls: null  # List of URLs to crawl (multiple pages)
  description: null  # Human-readable description of the source
  instruction: null  # Instructions for LLM extraction
  pydantic_model: null  # Pydantic model code for structured extraction
  llm: null  # LLM provider alias for extraction
  temperature: 0.0  # LLM temperature for randomness
  top_p: 0.9  # LLM top-p for nucleus sampling
  max_tokens: 8000  # Maximum tokens for LLM response
  out_file: null  # Base name for output files
  extraction_type: "schema"  # Type of extraction (schema or block)
  css_selector: null  # CSS selector for content extraction
  headless: true  # Run browser in headless mode
  cache_mode: "BYPASS"  # Caching mode for web crawling
  word_count_threshold: 1  # Minimum word count for page relevance
  page_timeout: 80000  # Timeout for page loading (ms)
  workflow: null  # Workflow type (llm, explore, pydantic, hierarchy, dom)
  deep_crawl: false  # Enable deep crawling for multiple pages
  max_depth: 3  # Maximum depth for deep crawling
  max_pages: 10  # Maximum pages to crawl in deep mode
  filters: []  # Filters for deep crawling (domain, URL patterns, etc.)
  expand_nodes: false  # Expand to crawl individual node pages
  capture_nodes_on_category_page: true  # Capture nodes directly from category pages
  crawl_node_pages: false  # Crawl individual node detail pages
  preview_limit: null  # Limit number of nodes to process
  category_schema: null  # Schema for extracting categories
  node_schema: null  # Schema for extracting nodes
  node_detail_schema: null  # Schema for extracting node details
  exclude_fields: []  # Fields to exclude from extraction
  include_fields: []  # Fields to include in extraction
  preserve_detail_name: false  # Preserve node names from detail pages
  debug_file: null  # File for debug output
  save_debug_nodes: false  # Enable debug output for nodes
  input_file: null  # Input file for hierarchy workflow
  out_format: ["json"]  # Output formats (json, markdown)
  prompt: null  # Custom prompt for LLM
  preserve_name: false  # Preserve names in extraction

sources:
  - id: "shadergraph_nodes_opengpt4o-mini"  # Unique identifier for this source configuration. Uses llm to crawl data, WIP.
    url: "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Node-Library.html"  # Main URL to crawl
    urls:  # List of URLs to crawl
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Node-Library.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Artistic-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Channel-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Custom-Render-Texture-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Input-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Math-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Procedural-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/ui-nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Utility-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/UV-Nodes.html"
    description: "Extract the hierarchical structure of Unity ShaderGraph nodes, including categories, subcategories, and individual nodes with descriptions. Require graph_nodes arrays with nested categories and nodes."  # Human-readable description
    instruction: |  # Instructions for LLM extraction
      From the crawled content of this page, extract Unity ShaderGraph nodes, categories, or subcategories present.
      Output a single NodeLibrary object.
      - If this page is the main Node Library page, populate graph_nodes with category objects (name only, no subcategories or nodes), and block_nodes similarly.
      - If this page is a category page (e.g., Artistic Nodes), populate graph_nodes with a single category object containing its name, and either subcategories (if the page has sections like Adjustment, Blend) with their nodes, or direct nodes if no subcategories.
      - Do not output multiple objects or empty categories. Ensure subcategories are nested under their parent category.
      - Only include data actually present on the page.
    pydantic_model: |  # Pydantic model code for structured extraction
      from pydantic import BaseModel, Field
      from typing import List, Optional

      class ShaderNode(BaseModel):
          name: str = Field(..., description="Name of the shader node.")
          description: str = Field(..., description="Description of the shader node.")

      class Subcategory(BaseModel):
          name: str = Field(..., description="Name of the subcategory.")
          nodes: List[ShaderNode] = Field(..., description="List of nodes in this subcategory.")

      class Category(BaseModel):
          name: str = Field(..., description="Name of the category.")
          subcategories: Optional[List[Subcategory]] = Field(None, description="List of subcategories, if any.")
          nodes: Optional[List[ShaderNode]] = Field(None, description="List of nodes directly in this category, if no subcategories.")

      class NodeLibrary(BaseModel):
          graph_nodes: List[Category] = Field(..., description="List of graph node categories.")
          block_nodes: List[Category] = Field(..., description="List of block node categories.")
    llm: "openrouter_gpt4o-mini"  # LLM provider alias
    out_file: "shadergraph_nodes_gpt4o-mini"  # Base name for output files
    workflow: "llm"  # Workflow type

  - id: "shadergraph_categories_opengpt4o-mini" #Uses llm to crawl data, WIP.
    url: "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Node-Library.html"
    description: "Process Unity Shadergraph category page and extract the ShaderGraph categories from the url."
    instruction: |
      From the crawled content of this page, extract Unity ShaderGraph categories.
      Output a single NodeLibrary object.
      - If this page is the main Node Library page, categories with descriptions. Skip block_nodes similarly.
      - Only include data actually present on the page.
    pydantic_model: |
      from pydantic import BaseModel, Field
      from typing import List, Optional

      class ShaderNode(BaseModel):
          name: str = Field(..., description="Name of the shader node.")
          description: str = Field(..., description="Description of the shader node.")

      class Subcategory(BaseModel):
          name: str = Field(..., description="Name of the subcategory.")
          nodes: List[ShaderNode] = Field(..., description="List of nodes in this subcategory.")

      class Category(BaseModel):
          name: str = Field(..., description="Name of the category.")
          subcategories: Optional[List[Subcategory]] = Field(None, description="List of subcategories, if any.")
          nodes: Optional[List[ShaderNode]] = Field(None, description="List of nodes directly in this category, if no subcategories.")

      class NodeLibrary(BaseModel):
          graph_nodes: List[Category] = Field(..., description="List of graph node categories.")
          block_nodes: List[Category] = Field(..., description="List of block node categories.")
    llm: "openrouter_gpt4o-mini"
    out_file: "shadergraph_categories"
    workflow: "llm"


  - id: "shadergraph_toc_explore" # Extracts all dom selectors from the sidebar.
    url: "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Node-Library.html"
    description: "Explore Unity Shadergraph node library structure based on sidebar. At this point only extract the hierarchical structure of Unity ShaderGraph nodes, including categories, subcategories, without crawling individual nodes for descriptions."
    instruction: |
      From the URL focus on the sidebar. It represents structure of the topics in Shadergaph documentation.
      - Extract the entire sidebar structure, starting with "About Shadergraph" and ending with Samples/Terrain Shaders/Performance Comparison
      - Save as well structured Markdown, preserving nested hierarchy.
    out_file: "shadergraph_toc_explore"
    out_format: ["markdown", "json"]
    css_selector: "#toc"
    workflow: "explore"

  - id: "shadergraph_content_explore" # Extracts all dom selectors from the iframe content
    url: "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Node-Library.html"
    description: "Explore the hierarchical structure of Unity ShaderGraph nodes, including categories, subcategories, and individual nodes with descriptions. Require graph_nodes arrays with nested categories and nodes."
    instruction: |
      From the URL focus on the page content, not the sidebar. It contains tables with links to Shadergraph categories, which in turn contain sub-category tables with Shadergraph nodes.
      - Extract the entire Shadergrah Nodes structure, and list all nodes under their correct categories.
      - Save as well structured Markdown, preserving nested hierarchy.
    out_file: "shadergraph_content"
    out_format: ["markdown", "json"]
    css_selector: "#_content"
    workflow: "explore"
    deep_crawl: true
    max_depth: 4
    max_pages: 50
    filters:
      - type: DomainFilter
        allowed_domains: ["docs.unity3d.com"]
      - type: URLPatternFilter
        patterns: ["*Nodes.html", "*Node.html"]
        # blocked_patterns: ["*Block-Node.html"]
      # - type: ContentRelevanceFilter
      #   query: "Unity ShaderGraph node documentation, categories like Artistic, Channel, Math, Procedural"
      #   threshold: 0.6
      # - type: ContentTypeFilter
      #   allowed_types: ["text/html", "application/json"]
      # - type: SEOFilter
      #   threshold: 0.5
      #   keywords: ["shader", "node", "unity"]



  - id: "shadergraph_content_hierarchy" # Can be used to make hierarhical JSON based on explore workflow output
    description: "Build hierarchical structure from explore output. Process the flat crawled markdown data from explore workflow and build a hierarchical JSON structure of ShaderGraph nodes."
    input_file: "shadergraph_content_explore.json"
    out_file: "shadergraph_hierarchy"
    url: "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Node-Library.html"
    workflow: "hierarchy"


  - id: "shadergraph_content_pydantic" # Supposed to create a pydantic schema and use it for extraction. Disapponting.
    url: "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Node-Library.html"
    urls:
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Node-Library.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Artistic-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Channel-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Custom-Render-Texture-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Input-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Math-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Procedural-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/ui-nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Utility-Nodes.html"
      - "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/UV-Nodes.html"
    description: "Generate Pydantic models from explore JSON: use LLM to analyze the explore JSON output and generate appropriate Pydantic models for the hierarchical structure"
    instruction: |
      From the crawled content of this page, extract Unity ShaderGraph nodes, categories, or subcategories present.
      Output a single NodeLibrary object.
      - If this page is the main Node Library page, populate graph_nodes with category objects (name only, no subcategories or nodes), and block_nodes similarly.
      - If this page is a category page (e.g., Artistic Nodes), populate graph_nodes with a single category object containing its name, and either subcategories (if the page has sections like Adjustment, Blend) with their nodes, or direct nodes if no subcategories.
      - Do not output multiple objects or empty categories. Ensure subcategories are nested under their parent category.
      - Only include data actually present on the page.
    prompt: |
      You are provided with the output from an explore workflow: a JSON file containing a list of pages with their URLs and raw markdown content, and a markdown file with combined content.
      The site is the Unity ShaderGraph Node Library documentation. The structure is hierarchical:
      - Root: NodeLibrary with graph_nodes and block_nodes (both lists of Category)
      - Category: name, url (optional), description (optional), subcategories (optional list of Subcategory), nodes (optional list of Node)
      - Subcategory: name, anchor (optional), nodes (list of Node)
      - Node: name, url (optional), description (optional)
      Analyze the provided data to understand the exact hierarchy and fields present.
      Generate appropriate Pydantic BaseModel classes in Python that accurately represent this structure.
      Include proper field types (str, List, Optional), descriptions using Field, and relationships.
      Ensure the models can be used for schema-based extraction.
      Output only the Python code for the models, starting with necessary imports and class definitions. No explanations or markdown.
    llm: "openrouter_gpt4o-mini"
    max_tokens: 16000
    out_file: "shadergraph_content"
    workflow: "pydantic"


  - id: "shadergraph_content_dom" # Correctly extracts node names and descriptions using DOM Selectors crwaling node pages in parallel.
    url: "https://docs.unity3d.com/Packages/com.unity.shadergraph@17.4/manual/Node-Library.html"
    description: "Unity Shadergraph node library structure based on DOM selectors. Seems to work great off the bat, we still dont capture sub-categories. Use the AI to help generate the correct schema."
    out_file: "shadergraph_nodes"
    out_format: "json"
    css_selector: "#_content"
    workflow: "dom"
    expand_nodes: true
    capture_nodes_on_category_page: false
    crawl_node_pages: true
    category_schema:
      name: "ShaderGraph Categories"
      baseSelector: "div:first-of-type table tbody tr"
      fields:
        - name: "category_name"
          selector: "a"
          type: "text"
        - name: "category_url"
          selector: "a"
          type: "attribute"
          attribute: "href"
        - name: "description"
          selector: "td:nth-child(2)"
          type: "text"
    node_schema:
      name: "ShaderGraph Nodes"
      baseSelector: "table tbody tr"
      fields:
        - name: "node_name"
          selector: "a"
          type: "text"
        - name: "node_url"
          selector: "a"
          type: "attribute"
          attribute: "href"
    node_detail_schema:
      name: "Node Details"
      baseSelector: "#_content"
      fields:
        - name: "description"
          selector: "h1:first-of-type ~ p, h2:first-of-type ~ p"
          type: "text"
      preserve_name: false

  - id: "houdini21_nodes_dom_minimal" # Correctly extracts node names and descriptions using DOM Selectors on the category pages
    url: "https://www.sidefx.com/docs/houdini21.0/nodes/index.html"
    description: "Crawl and extract the hierarchical structure of Houdini nodes using DOM selectors. Limit extraction to categories, node names, urls and node descriptions from the category pages. Do not crawl the node pages themselves for full descriptions. Use the AI to help generate the correct schema."
    out_file: "houdini_nodes_minimal"
    out_format: "json"
    css_selector: "#subtopics-body"
    workflow: "dom"
    expand_nodes: true
    crawl_node_pages: false
    category_schema:
      name: "Houdini Node Categories"
      baseSelector: "li"
      fields:
        - name: "category_name"
          selector: "a"
          type: "text"
        - name: "category_url"
          selector: "a"
          type: "attribute"
          attribute: "href"
        - name: "description"
          selector: "p:nth-of-type(2)"
          type: "text"
    node_schema:
      name: "Houdini Nodes"
      baseSelector: "ul.subtopics_item_group.item_group li"
      fields:
        - name: "node_name"
          selector: "a.label-text.node"
          type: "text"
        - name: "node_url"
          selector: "a.label-text.node"
          type: "attribute"
          attribute: "href"
        - name: "summary"
          selector: "p.summary"
          type: "text"
    exclude_fields:
      - description

  - id: "houdini21_vex_dom_minimal" # Correctly extracts node names and descriptions using DOM Selectors on the category page
    url: "https://www.sidefx.com/docs/houdini21.0/vex/functions/index.html"
    description: "Crawl and extract the hierarchical structure of Houdini VEX functions using DOM selectors. Limit extraction to categories, function names, urls and function descriptions from the vex functions overview page. Do not crawl the function pages themselves for full descriptions. Use the AI to help generate the correct schema."
    out_file: "houdini_vex_functions"
    out_format: "json"
    css_selector: "div.original.filtered-body"
    workflow: "dom"
    expand_nodes: true
    crawl_node_pages: false
    category_schema:
      name: "VEX Function Categories"
      baseSelector: "section.heading.pull.left"
      fields:
        - name: "category_name"
          selector: "h2.label.heading.pull.left"
          type: "text"
        - name: "category_id"
          selector: "h2.label.heading.pull.left"
          type: "attribute"
          attribute: "id"
        - name: "description"
          selector: "div.content > p:first-of-type"
          type: "text"
        - name: "functions"
          selector: "div.content li.item.subtopics_item, div.content li"
          type: "nested_list"
          fields:
            - name: "function_name"
              selector: "p.label a.label-text.vex, a.label-text.vex, a"
              type: "text"
            - name: "function_url"
              selector: "p.label a.label-text.vex, a.label-text.vex, a"
              type: "attribute"
              attribute: "href"
            - name: "summary"
              selector: "p.summary"
              type: "text"
    node_schema:
      name: "VEX Functions"
      baseSelector: "div.content a.label-text.vex, div.content a"
      fields:
        - name: "function_name"
          selector: ""
          type: "text"
        - name: "function_url"
          selector: ""
          type: "attribute"
          attribute: "href"
        - name: "summary"
          selector: "a + p, a ~ p"
          type: "text"
    exclude_fields:
      - description

  - id: "pyqgis_340_minimal"
    url: "https://qgis.org/pyqgis/3.40/index.html"
    description: "Crawl and extract the hierarchical structure of QGIS Python API classes using DOM selectors. Extract categories from root, subcategories (tables) from category pages, and classes with names, URLs, and descriptions. DOM-only workflow, no LLM."
    out_file: "pyqgis_340_minimal"
    out_format: "json"
    workflow: "dom"
    css_selector: "div.wy-nav-content"
    expand_nodes: true
    capture_nodes_on_category_page: true
    crawl_node_pages: false
    has_subcategories: true
    exclude_categories:
      - "Frequently Asked Questions"
    category_schema:
      name: "QGIS Categories"
      baseSelector: "li.toctree-l1"
      fields:
        - name: "category_name"
          selector: "a.reference.internal"
          type: "text"
        - name: "category_url"
          selector: "a.reference.internal"
          type: "attribute"
          attribute: "href"
    node_schema:
      name: "Classes"
      baseSelector: "table.docutils.align-default tr"
      fields:
        - name: "node_name"
          selector: "td:first-child a"
          type: "text"
        - name: "node_url"
          selector: "td:first-child a"
          type: "attribute"
          attribute: "href"
        - name: "description"
          selector: "td:nth-child(2)"
          type: "text"
